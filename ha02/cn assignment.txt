import java.util.LinkedList;
import java.util.Iterator;

import java.io.FileReader;
import java.io.FileWriter;
import java.io.BufferedReader;
import java.io.BufferedWriter;

import java.net.DatagramSocket;
import java.net.SocketTimeoutException;

public class sender {
   public static void main(String[] args) throws Exception {
   
   checkCommandLineArguments(args);

   String emulatorAddress = args[0];
   int emulatorPort = Integer.parseInt(args[1]);
   int senderPort = Integer.parseInt(args[2]);
   String fileName = args[3];

   
   int base = 0;

  
   int nextSeqNum = 0;

    
   boolean isEOTPacketSent = false;

   LinkedList<packet> unACKedPacketsSent = new LinkedList<packet>();

   
   BufferedReader fileReader =
      new BufferedReader(new FileReader(fileName));
   BufferedWriter seqNumLogWriter =
      new BufferedWriter(new FileWriter("seqnum.log"));
   BufferedWriter ACKLogWriter =
      new BufferedWriter(new FileWriter("ack.log"));

   
   DatagramSocket senderSocket = new DatagramSocket(senderPort);

    
   timeouttask timeOutTask = new timeouttask(unACKedPacketsSent,
      emulatorAddress, emulatorPort, senderSocket, seqNumLogWriter);
   timer senderTimer = new timer(timeOutTask);

 
   while (true) {
      if (!isWindowFull(base, nextSeqNum) &&
         !isEOTPacketSent) { 
         char[] charsRead = new char[packet.MAX_DATA_LENGTH];
            
         
         int numOfCharsRead =
            fileReader.read(charsRead, 0, packet.MAX_DATA_LENGTH);
            
       
         packet packetToEmulator = null;
 
         if (numOfCharsRead == -1) { 
            
            packetToEmulator = packet.createEOT(nextSeqNum);
   
            
            isEOTPacketSent = true;
         }
          else {
            
            packetToEmulator = packet.createData(nextSeqNum, new String(charsRead, 0, numOfCharsRead));
         } 

         
         unACKedPacketsSent.offer(packetToEmulator);

         
         packetToEmulator.sendTo(emulatorAddress, emulatorPort, senderSocket);

         if (base == nextSeqNum) {
            senderTimer.start(); 
         } 

         if (!packetToEmulator.isEOT()) { 
            seqNumLogWriter.write(String.valueOf(nextSeqNum));
            seqNumLogWriter.newLine();
         } 

         
         nextSeqNum = (nextSeqNum + 1) % packet.SEQ_NUM_MODULO;
      } else {
         
         packet packetFromEmulator = packet.receiveFrom(senderSocket);

         
         int seqNum = packetFromEmulator.getSeqNum();

         if (!packetFromEmulator.isEOT()) {
            ACKLogWriter.write(String.valueOf(seqNum));
            ACKLogWriter.newLine();
         } 

        
         base = (seqNum + 1) % packet.SEQ_NUM_MODULO;

        
         removeACKedPacketsSent(unACKedPacketsSent, base);

         if (base == nextSeqNum) { 
            senderTimer.stop();
                              
            if (packetFromEmulator.isEOT()) { 
               break;
            } 
         } else {
            
            senderTimer.restart();
         } 
      } 
   }

   
   senderSocket.close();
      
   
   ACKLogWriter.close();
   seqNumLogWriter.close();
   fileReader.close();
   } 

   
   private static void checkCommandLineArguments(String[] args) throws Exception {
      if (args.length != 4) {
         System.out.println("ERROR: Expecting 4 command line arguments," +
            " but got " + args.length + " arguments");
         System.exit(-1);
      } 
          
         if (!packetToEmulator.isEOT()) { 
            seqNumLogWriter.write(String.valueOf(nextSeqNum));
            seqNumLogWriter.newLine();
         }

         
         nextSeqNum = (nextSeqNum + 1) % packet.SEQ_NUM_MODULO;
      } 
        else {
         
         packet packetFromEmulator = packet.receiveFrom(senderSocket);

         
         int seqNum = packetFromEmulator.getSeqNum();

         if (!packetFromEmulator.isEOT()) { 
            ACKLogWriter.write(String.valueOf(seqNum));
            ACKLogWriter.newLine();
         } 

        
         base = (seqNum + 1) % packet.SEQ_NUM_MODULO;

         
         removeACKedPacketsSent(unACKedPacketsSent, base);

         if (base == nextSeqNum) {
            senderTimer.stop();
                              
            if (packetFromEmulator.isEOT()) { 
               break;
            } 
         } else {
                  senderTimer.restart();
         } 
      } 
   } 

  
   senderSocket.close();
      
  
   ACKLogWriter.close();
   seqNumLogWriter.close();
   fileReader.close();
   } 


   private static void checkCommandLineArguments(String[] args) throws Exception {
      if (args.length != 4) {
         System.out.println("ERROR: Expecting 4 command line arguments," +
            " but got " + args.length + " arguments");
         System.exit(-1);
      } 

      if ((!isValidIPAddress(args[0])) && (!isValidHostName(args[0]))) {
         System.out.println("ERROR: Expecting an emulator address which is" +
            " a valid IP address or host name, but got " + args[0]);
         System.exit(-1);
      } 

      try {
         int emulatorPort = Integer.parseInt(args[1]);
      } catch (NumberFormatException e) {
         System.out.println("ERROR: Expecting an emulator port which is" +
            " an integer, but got " + args[1]);
         System.exit(-1);
      }

      try {
         int senderPort = Integer.parseInt(args[2]);
      } catch (NumberFormatException e) {
         System.out.println("ERROR: Expecting a sender port which is" +
            " an integer, but got " + args[2]);
      } 
   }
   private static boolean isValidIPAddress(String string) throws Exception {
      String regex = "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\." +
                     "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\." +
                     "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\." +
                     "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$";
      boolean isRegexMatch = string.matches(regex);
      return isRegexMatch;
   } 
   private static boolean isValidHostName(String string) throws Exception {
      String regex = "^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])" +
                     "(\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9]))*$";
      boolean isRegexMatch = string.matches(regex);
      
      boolean isCorrectLength = (string.length() <= 255);
      
      String[] labels = string.split("\\.");
      boolean isLabelsNotAllNumeric = true;
      for (String label : labels) {
         if (label.matches("^[0-9]+$")) {
            isLabelsNotAllNumeric = false;
            break;
         } 
      } 

      if (isRegexMatch && isCorrectLength && isLabelsNotAllNumeric) {
         return true;
      } else {
         return false;
      } 
   } 
   private static boolean isWindowFull(int base, int nextSeqNum) {
      final int WINDOW_SIZE = 10;
      if ((base + WINDOW_SIZE) >= packet.SEQ_NUM_MODULO) {
         
         if ((nextSeqNum >= base) && (nextSeqNum < packet.SEQ_NUM_MODULO)) {
            return false;
         } else if ((nextSeqNum >= 0) &&
            (nextSeqNum < ((base + WINDOW_SIZE) % packet.SEQ_NUM_MODULO))) {
            return false;
         } else {
            return true;
         }  
      } else {
         
         if ((nextSeqNum >= base) && (nextSeqNum < (base + WINDOW_SIZE))) {
            return false;
         } else {
            return true;
         } // if
      
      } 
   } 
  private static void removeACKedPacketsSent(LinkedList<packet> unACKedPacketsSent,
      int base) {
      Iterator<packet> it = unACKedPacketsSent.iterator();
      
      while (it.hasNext()) {
         packet packetToEmulator = it.next();
         
         if (packetToEmulator.getSeqNum() == base) {
            break;
         } else {
            it.remove();
         } 
      } 
   } 
}










import java.io.FileWriter;
import java.io.BufferedWriter;

import java.net.DatagramSocket;

public class receiver {
   public static void main(String[] args) throws Exception {
      
      checkCommandLineArguments(args);
 
      String emulatorAddress = args[0];
      int emulatorPort = Integer.parseInt(args[1]);
      int receiverPort = Integer.parseInt(args[2]);
      String fileName = args[3];

     
      int expectedSeqNum = 0;
      
     
      BufferedWriter fileWriter =
         new BufferedWriter(new FileWriter(fileName));
      BufferedWriter arrivalLogWriter =
         new BufferedWriter(new FileWriter("arrival.log"));

     
      DatagramSocket receiverSocket = new DatagramSocket(receiverPort);

      
      while (true) {
         
         packet packetFromEmulator = packet.receiveFrom(receiverSocket);
         
         
         int seqNum = packetFromEmulator.getSeqNum();
         
         if (!packetFromEmulator.isEOT()) { 
            arrivalLogWriter.write(String.valueOf(seqNum));
            arrivalLogWriter.newLine();
         } 

         if (seqNum == expectedSeqNum)    {
                  if (packetFromEmulator.isEOT()) { 
               packet packetToEmulator = packet.createEOT(expectedSeqNum);
               packetToEmulator.sendTo(emulatorAddress, emulatorPort, receiverSocket);
               break;
            } else {
               
               String data = new String(packetFromEmulator.getData());
               fileWriter.write(data);

               
               packet packetToEmulator = packet.createACK(expectedSeqNum);
               packetToEmulator.sendTo(emulatorAddress, emulatorPort, receiverSocket);

               
               expectedSeqNum = (expectedSeqNum + 1) % packet.SEQ_NUM_MODULO;
            } 
         
         } else {
            
            int lastSeqNum = (expectedSeqNum - 1) % packet.SEQ_NUM_MODULO;
            
            if (lastSeqNum < 0) { 
               lastSeqNum = lastSeqNum + packet.SEQ_NUM_MODULO;
            }  
            packet packetToEmulator = packet.createACK(lastSeqNum);
            packetToEmulator.sendTo(emulatorAddress, emulatorPort, receiverSocket);
         } 
      } 

      
      receiverSocket.close();
      
      
      arrivalLogWriter.close();
      fileWriter.close();
   } 

   
   private static void checkCommandLineArguments(String[] args) throws Exception {
      if (args.length != 4) {
         System.out.println("ERROR: Expecting 4 command line arguments," +
            " but got " + args.length + " arguments");
         System.exit(-1);
      } 

      if ((!isValidIPAddress(args[0])) && (!isValidHostName(args[0]))) {
         System.out.println("ERROR: Expecting an emulator address which is" +
            " a valid IP address or host name, but got " + args[0]);
         System.exit(-1);
      }

      try {
         int emulatorPort = Integer.parseInt(args[1]);
      } catch (NumberFormatException e) {
         System.out.println("ERROR: Expecting an emulator port which is" +
            " an integer, but got " + args[1]);
         System.exit(-1);
      }  

      try {
         int senderPort = Integer.parseInt(args[2]);
      } catch (NumberFormatException e) {
         System.out.println("ERROR: Expecting a receiver port which is" +
            " an integer, but got " + args[2]);
      } 
   } 

   
   private static boolean isValidIPAddress(String string) throws Exception {
      String regex = "^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\." +
                     "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\." +
                     "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\." +
                     "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$";
      boolean isRegexMatch = string.matches(regex);
      return isRegexMatch;
   } 
   private static boolean isValidHostName(String string) throws Exception {
      String regex = "^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9])" +
                     "(\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-]{0,61}[a-zA-Z0-9]))*$";
      boolean isRegexMatch = string.matches(regex);
      
      boolean isCorrectLength = (string.length() <= 255);
      
      String[] labels = string.split("\\.");
      boolean isLabelsNotAllNumeric = true;
      for (String label : labels) {
         if (label.matches("^[0-9]+$")) {
            isLabelsNotAllNumeric = false;
            break;
         } 
     } 

      if (isRegexMatch && isCorrectLength && isLabelsNotAllNumeric) {
         return true;
      } else {
         return false;
      } 
   } 
}



